<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on</title><link>https://arkamfahry.github.io/quartz/tags/OOP/</link><description>Recent content in OOP on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://arkamfahry.github.io/quartz/tags/OOP/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstraction</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/abstraction/</guid><description>In simple terms hiding implementation details is called abstraction Hiding implementation details and only showing essential details for the user.</description></item><item><title>Class and Object</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/class_and_object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/class_and_object/</guid><description>Class A class is a template (blueprint) which is used to create objects in programming
A class has attributes and functions</description></item><item><title>Encapsulation</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/encapsulation/</guid><description>Encapsulation is the process of combining Attributes and Methods in to single unit.
The basic unit of encapsulation is the class.</description></item><item><title>Final Keyword</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/final_keyword/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/final_keyword/</guid><description>Final Variable When a variable is declared with the final keyword, its value can’t be modified, essentially, a constant This also means that you must initialize a final variable.</description></item><item><title>Inheritance</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/Inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/Inheritance/</guid><description>Inheritance gives the ability to re-use attributes and methods of a class in another class In simple terms inheritance is reuse In inheritance there are two class Super Class Sub Class The Super Class and the Sub Class has an &amp;ldquo;Is a&amp;rdquo; a relationship between them The association &amp;ldquo;has a&amp;rdquo; relation between them There are multiple types of inheritance Single Inheritance Hierarchical Inheritance Multilevel Inheritance Single Inheritance A class inherits another class is called single inheritance In the top example Manger class inherits the Employee class The inheritance done only in a one level Super class to Sub class 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Employee { protected String id; protected String name; protected float salary; public void setEmployeeData(String id, String name, float salary) { this.</description></item><item><title>Java</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Java/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Java/java/</guid><description>Install Java JDK Side note need an oracle account Install java version 8 for stability Install java in the default location Install all the default development tools Set the environment variables for java and javac Facts about java Java is a compiled and interpreted programing language which runs on more then 3 billion devices Java is used to build app for mobile application to enterprise scale server application Java is a statically typed language with garbage collection Java is also case sensitive Java compiler (Javac) The Java compiler (javac) is the compiler which turns java source code into class files which contains java bytecode which is run on the Java virtual machine (JVM) Java virtual machine (JVM) Java virtual machine is used to execute the java byte code which are in java class files Java virtual machine is a abstract virtual machine that runs on top of the host OS.</description></item><item><title>Polymorphism</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/polymorphism/</guid><description>Polymorphism Polymorphism means having many forms Here &amp;lsquo;poly&amp;rsquo; means many &amp;lsquo;morph&amp;rsquo; means forms It is the ability of variables and functions to objects to take on multiple forms Polymorphism allows to define one interface or method and have multiple implementations Type of Polymorphism Method overloading Method overriding Overloading In method overloading it is possible to have the same name for the methods but different parameter lists and different definitions Example 1</description></item><item><title>Public, Private and Protected Labels</title><link>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/labels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arkamfahry.github.io/quartz/Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/labels/</guid><description>Public When a attribute or method is given public label it will be visible to all classes out side its [[Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/class_and_object#Class|class]] Normally attributes are not made public Methods are made public to implement functionality and access private attributes Lowest level of security is given to a public attribute its value can be mutated by any other [[Nibm_Notes/Semester_1/Stage_2/OOP/Concepts/class_and_object#Class|class]] without any restriction.</description></item></channel></rss>