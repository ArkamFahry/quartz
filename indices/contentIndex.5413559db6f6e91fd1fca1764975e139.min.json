{"/":{"title":"OverDeveloped","content":"\n# **My Real ðŸ§  Is A Sleep ( if I had one ðŸ§Ÿ) This Is My Second ðŸ§ **\n\n* #### The CosmicðŸš€ Gateway For ðŸ‘½ Who Like Development And Technology\n\n-  This Is A Personal Knowledge Management system All [[utils/about/_about|About]] ðŸ”¥Topics In Development And The ðŸ”¥ðŸ”¥ Technology Around","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/detailed_notes/containerization/docker/docker":{"title":"Docker","content":"\n**Docker** is a set of platform as a service (PaaS) products which uses OS-level virtualization to deliver software in a _container_ . A container is light weight isolated virtual environment which runs reliably in any environment which has a docker engine. \n\n#### Why do we need docker\n\nLet say you have built some app. Which runs in a weird flavor of Linux  and it's written in COBOL. So lets say your trying to share this app with your friend. But he doesn't even use Linux or he doesn't even know what is COBOL. So he can't use your cool app. So we will  have have t o replicate our environment. We can use a virtual machine to do this which is the OG way to do it. In the VM the hardware is simulated and installed with the required OS and dependencies but because each VM has it's own OS they are bulky, heavy and slow. So you can use a docker container to share your app. Docker containers are the same as VM's but with a key difference is without virtualizing hardware the docker engine virtualizes the OS and uses the shared kernel to run the applications. Which means docker containers are faster and light weight than VM's. In simple terms docker is fast, reliable and lightweight virtualization solution. \n\n#### The universe of docker\n\n- Docker File\n\t- The [[detailed_notes/containerization/docker/docker-file|docker file]]  is like DNA it's code which describes how the docker image should be built.\n- Docker Image\n\t- The docker image  is a snapshot of the software along with all it's dependencies to the operating system level. \n\t- The image is immutable it can be used to spin up multiple containers of the software in the real world. \n- Docker Container\n\t- The docker container is the running docker image.\n- Docker Compose\n\t- The [[detailed_notes/containerization/docker/docker-compose|docker compose]] file is used to deploy multiple docker containers at once.\n\n\n#### The docker cli and desktop app\n\n- Docker has a a cli to interact with the docker engine\n\t- The [[detailed_notes/containerization/docker/docker-commands|docker cli commands]] can be used to build, deploy, kill and do many more things to docker containers.\n- Docker also has desktop apps for Windows, Linux and Mac.  \n","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/detailed_notes/containerization/docker/docker-commands":{"title":"Docker Commands","content":"\n## Installation\n\nOne click installation script:\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n```\n\nRun docker as non root user:\n```\nsudo groupadd docker\nsudo usermod -aG docker $USER\n```\n\nInstall Docker Engine : [Docker Engine](https://docs.docker.com/engine/install/)\n\n---\n## Build Images\n\n\n---\n## Docker CLI\n\n**Run Containers**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker run IMAGE` | Start a new container\n`docker run --name CONTAINER IMAGE` | Start a new container and set a name\n`docker run -p HOSTPORT:CONTAINERPORT IMAGE` | Start a new container with mapped ports\n`docker run -P IMAGE` | Start a new container and map all ports\n\n**Container Management:**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker create IMAGE` | Create a new container\n`docker start CONTAINER` | Start a container\n`docker stop CONTAINER` | Graceful stop a container\n`docker kill CONTAINER` | Kill (SIGKILL) a container\n`docker restart CONTAINER` | Graceful stop and restart a container\n`docker pause CONTAINER` | Suspend a container\n`docker unpause CONTAINER` | Resume a container\n`docker rm CONTAINER` | Destroy a container\n\n**Container Bulk Management**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker stop $(docker ps -q)` | To stop all the running containers\n`docker stop $(docker ps -a -q)` | To stop all the stopped and running containers\n`docker kill $(docker ps -q)` | To kill all the running containers\n`docker kill $(docker ps -a -q)` | To kill all the stopped and running containers\n`docker restart $(docker ps  -q)` | To restart all  running containers\n`docker restart $(docker ps -a -q)` | To restart all the stopped and running containers\n`docker rm $(docker ps  -q)` | To destroy all running containers\n`docker rm $(docker ps -a -q)` | To destroy all the stopped and running containers\n`docker pause $(docker ps  -q)` | To pause all  running containers\n`docker pause $(docker ps -a -q)` | To pause all the stopped and running containers\n`docker start $(docker ps  -q)` | To start all  running containers\n`docker start $(docker ps -a -q)` | To start all the stopped and running containers\n`docker rm -vf $(docker ps -a -q)` | To delete all containers including its volumes use\n`docker rmi -f $(docker images -a -q)` | To delete all the images\n`docker system prune` | To delete all dangling and unused images, containers, cache and volumes\n`docker system prune -a` | To delete all used and unused images\n`docker system prune --volumes` | To delete all docker volumes\n\n**Inspect Containers:**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker ps` | List running containers\n`docker ps -a` | List all containers, including stopped\n`docker logs CONTAINER` | Show a container output\n`docker logs -f CONTAINER` | Follow a container output\n`docker top CONTAINER` | List the processes running in a container\n`docker diff` | Show the differences with the image (modified files)\n`docker inspect` | Show information of a container (json formatted)\n\n**Run Commands:**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker attach CONTAINER` | Attach to a container\n`docker cp CONTAINER:PATH HOSTPATH` | Copy files from the container\n`docker cp HOSTPATH CONTAINER:PATH` | Copy files into the container\n`docker export CONTAINER` | Export the content of the container (tar archive)\n`docker exec CONTAINER` | Run a command inside a container\n`docker exec -it CONTAINER /bin/bash` | Open an interactive shell inside a container (there is no bash in some images, use /bin/sh)\n`docker wait CONTAINER` | Wait until the container terminates and return the exit code\n\n**Images:**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker images` | List all local images\n`docker history IMAGE` | Show the image history\n`docker inspect IMAGE` | Show information (json formatted)\n`docker tag IMAGE TAG` | Tag an image\n`docker commit CONTAINER IMAGE` | Create an image (from a container)\n`docker import URL` | Create an image (from a tarball)\n`docker rmi IMAGE` | Delete images\n`docker pull REPO:[TAG]` | pull an image/repo from a registry\n`docker push REPO:[TAG]` | push and image/repo to a registry\n`docker search TEXT` | Search an image on the official registry\n`docker login` | Login to a registry\n`docker logout` | Logout from a registry\n`docker save REPO:[TAG]` | Export an image/repo as a tarball\n`docker load` | Load images from a tarball\n\n**Volumes:**\n\nCOMMAND | DESCRIPTION\n---|---\n`docker volume ls` | List all vol1umes\n`docker volume create VOLUME` | Create a volume\n`docker volume inspect VOLUME` | Show information (json formatted)\n`docker volume rm VOLUME` | Destroy a volume\n`docker volume ls --filter=\"dangling=true\"` | List all dangling volumes (not referenced by any container)\n`docker volume prune` | Delete all volumes (not referenced by any container)\n\n### Backup a container\nBackup docker data from inside container volumes and package it in a tarball archive.\n`docker run --rm --volumes-from CONTAINER -v $(pwd):/backup busybox tar cvfz /backup/backup.tar CONTAINERPATH`\n\n### Restore container from backup\nRestore the volume with a tarball archive.\n`docker run --rm --volumes-from CONTAINER -v $(pwd):/backup busybox sh -c \"cd CONTAINERPATH \u0026\u0026 tar xvf /backup/backup.tar --strip 1\"`\n## Networks\n\n## Troubleshooting\n### Networking\n`docker run --name netshoot --rm -it nicolaka/netshoot /bin/bash`","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/detailed_notes/containerization/docker/docker-compose":{"title":"Docker Compose","content":"\n**Docker compose** is used to run multiple docker containers at once \n\n## Networking\n\nBy default Docker-Compose will create a new network for the given compose file. You can change the behavior by defining custom networks in your compose file.\n\n### Create and assign custom network\n\n*Example:*\n```yaml\nnetworks:\n  custom-network:\n\nservices:\n  app:\n    networks:\n      - custom-network\n```\n### Use existing networks\nIf you want to use an existing Docker network for your compose files, you can add the `external: true` parameter in your compose file\n*Example:*\n```yaml\nnetworks:\n  existing-network:\n    external: true\n```\n\n## Volumes\n\nVolumes allow Docker containers to use persistent storage. In a compose file, you can create and map volumes like this:\n```yaml\nvolumes:\n  my-volume:\n\nservices:\n  app:\n    volumes:\n      - my-volume:/path-in-container\n```\n\nThese volumes are stored in `/var/lib/docker/volumes`.\n\n## Commands\n\nCOMMAND | DESCRIPTION\n---|---\n`docker compose up -d` | Start a new container stack\n`docker compose down` | Stops the container stack\n`docker compose down --remove-orphans` | Stops the container stack and Remove containers for services not defined in the Compose file","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/detailed_notes/containerization/docker/docker-file":{"title":"Docker FIle","content":"\n A **docker file** is  a text document that contains all the commands a user could call on the command line to assemble an docker image. Using docker build users can create an automated build that executes the command's described in the **docker file** in succession to create a docker image.    \n \n#### Example docker files\n\n- #### A docker file  \n```Docker\n# The base image\nFROM node:lts-alpine3.16\n\n# Create a directory for the app\nRUN mkdir -p usr/src/app\n\n# Copies all the files \nCOPY . .\n\n# Install app dependencies\n# The order matters for dependencie caching\nRUN npm install\n\n# Exposeses internal port 3000 in the docker contianer\nEXPOSE 3000\n\n# The command which runs when the docker container starts\nCMD [ \"npm\", \"run\", \"start\" ]\n```\n- #### A multi stage docker file  \n```Docker\n# The base image for the docker image build\nFROM node:lts-alpine3.16 AS builder\n\n# Create app directory\nWORKDIR /app\n\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\nCOPY package*.json ./\nCOPY prisma ./prisma/\n\n# Install app dependencies\n# The order matters for dependencie caching\nRUN npm install\n\n# Copies all the files \nCOPY . .\n\n# Builds the application\nRUN npm run build\n\n# The docker image runner image\nFROM node:lts-alpine3.16\n\n# copies all the files from the builder the runner\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package*.json ./\nCOPY --from=builder /app/dist ./dist\n\n# Exposeses internal port 3000 in the docker contianer\nEXPOSE 3000\n\n# The command which runs when the docker container starts\nCMD [ \"npm\", \"run\", \"start:prod\" ]\n```  ","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/detailed_notes/containerization/podman/podman":{"title":"Podman","content":"","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/utils/about/_about":{"title":"About","content":"\n### About This Mindless Digital Garden ( buzz word for blog )\n\n1. This is a personal knowledge management system (PKM) about everything Development and Technology related but there will be always of topic stuff.\n\n2. In here everything is a mesh and every related note is linked to each other.\n\n3. The PKM is based on technologies I have used or I am interested in and also the bleeding edge technologies in the dev world. So this blog is highly opinionated. So take my words with a big grain of ðŸ§‚.\n\n4. Enjoy Reading.\n\n### Technologies Used In This Blog\n\n1. [Hugo](https://gohugo.io/) a really good static site generator and the fastest way to render html in the world.\n\n2. [Obsidian](https://obsidian.md/) a second brain which uses standard markdown to save data.\n\n3. [Quartz](https://github.com/jackyzha0/quartz/) uses Hugo to turn obsidian vault into a static site.\n\n4. [Github](https://github.com/) is used as a content management system.\n\n5. [GithubPages](https://pages.github.com/) used to host the PKM a good static site hosting option.\n\n6. [GithubActions](https://github.com/features/actions) are used to rebuild and redeploy the PKM.\n\n### Features \n\n1. Graph View\n2. Relation Tags\n3. Back Links\n4. Native [[utils/features/_latex_support|latex]] support \n5. Native [[utils/features/_callouts|callout]] support\n\n### About Me\n\n- Who am I kidding. I am nobody ðŸ‘‹\n\n#about  #features","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/utils/features/_callouts":{"title":"Callouts","content":"\n## Callout support\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsible callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n\n#features ","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null},"/utils/features/_latex_support":{"title":"Latex Support","content":"\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n#features ","lastmodified":"2022-10-23T08:22:14.311408142Z","tags":null}}